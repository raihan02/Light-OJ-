///#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <string.h>
#define nl printf("\n")
using namespace std;
typedef pair<int , int> pi;

typedef vector <pi> vc;
int n;
vc vertex[30005];
int dis1[30005];
int dis2[30005];
int tree_diameter (int src)
{
    memset(dis1 , -1 , sizeof(dis1));
    dis1[src] = 0;
    queue<int> q;
   q.push(src);
   while(!q.empty())
   {
       int u = q.front();

       q.pop();
       for(int i = 0; i < vertex[u].size(); i++)
       {
           int v , cost;
           v = vertex[u][i].first;
           cost = vertex[u][i].second;

           if(dis1[v] == -1)
           {
               dis1[v] = dis1[u] + cost;
               q.push(v);
           }
       }
   }
   int res, sum;
   res = sum = 0;

   for(int i = 0; i < n; i++)
   {

       if(dis1[i] > sum)
       {
           res = i;
           sum = dis1[i];
       }
   }


   return res;
}
void Another_tree_diameter (int src)
{
    memset(dis2,  -1, sizeof(dis2));
    dis2[src] = 0;
    queue<int> q;
   q.push(src);
   while(!q.empty())
   {
       int u = q.front();

       q.pop();
       for(int i = 0; i < vertex[u].size(); i++)
       {
           int v , cost;
           v = vertex[u][i].first;
           cost = vertex[u][i].second;

           if(dis2[v] == -1)
           {
               dis2[v] = dis2[u] + cost;
               q.push(v);
           }
       }
   }
}
int main()
{
    ///ios_base::sync_with_stdio(0);
    ///cin.tie(0);

     int tes, o = 0;
     ///cin >> tes;
     scanf("%d", &tes);
     while(tes--)
     {
         o++;
         ///int n;
         cin >> n;

         for(int i = 0; i < n - 1; i++)
         {
             int a, b, cost;
               scanf("%d %d %d", &a, &b, &cost);
             ///cin >> a >> b >> cost;

             vertex[a].push_back(make_pair(b, cost));
             vertex[b].push_back(make_pair(a, cost));
         }
         printf("Case %d:\n",o);

        int x = tree_diameter(0);

        int y = tree_diameter(x);
        Another_tree_diameter(y);

        for(int i = 0; i < n; i++)
        {
            int mx = max(dis1[i], dis2[i]);

            printf("%d\n",mx);
        }

        for(int i = 0; i < n; i++)
        {
            vertex[i].clear();
        }

     }
}
